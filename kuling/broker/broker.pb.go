// Code generated by protoc-gen-go.
// source: broker.proto
// DO NOT EDIT!

/*
Package broker is a generated protocol buffer package.

It is generated from these files:
	broker.proto

It has these top-level messages:
	CreateTopicRequest
	CreateTopicResponse
	AuthFetchRequest
	AddressTopicShard
	AuthFetchResponse
*/
package broker

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// CreateTopic request
type CreateTopicRequest struct {
	Topic       string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	ReadAuthTtl int32  `protobuf:"varint,2,opt,name=read_auth_ttl" json:"read_auth_ttl,omitempty"`
}

func (m *CreateTopicRequest) Reset()         { *m = CreateTopicRequest{} }
func (m *CreateTopicRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTopicRequest) ProtoMessage()    {}

// The response message containing the greetings
type CreateTopicResponse struct {
	Topic   string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Status  int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateTopicResponse) Reset()         { *m = CreateTopicResponse{} }
func (m *CreateTopicResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTopicResponse) ProtoMessage()    {}

// AuthFetchRequest
type AuthFetchRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
}

func (m *AuthFetchRequest) Reset()         { *m = AuthFetchRequest{} }
func (m *AuthFetchRequest) String() string { return proto.CompactTextString(m) }
func (*AuthFetchRequest) ProtoMessage()    {}

type AddressTopicShard struct {
	Topic   string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Shard   string `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *AddressTopicShard) Reset()         { *m = AddressTopicShard{} }
func (m *AddressTopicShard) String() string { return proto.CompactTextString(m) }
func (*AddressTopicShard) ProtoMessage()    {}

// AuthFetchResponse
type AuthFetchResponse struct {
	Token int32                `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
	Hosts []*AddressTopicShard `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *AuthFetchResponse) Reset()         { *m = AuthFetchResponse{} }
func (m *AuthFetchResponse) String() string { return proto.CompactTextString(m) }
func (*AuthFetchResponse) ProtoMessage()    {}

func (m *AuthFetchResponse) GetHosts() []*AddressTopicShard {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func init() {
}

// Client API for Broker service

type BrokerClient interface {
	// CreateTopic sends a create topic request down to the log store
	// and echoes the result back to the client
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	// AuthorizeFetch asks the broker for authorization to fetch messages from
	// a topic. The auth request contains a group name that multiple clients
	// that belong to the same group can use. The broker handles load balancing
	// the topic shards between the groups memebers and makes sure no two clients
	// can read the same messages
	AuthorizeFetch(ctx context.Context, in *AuthFetchRequest, opts ...grpc.CallOption) (*AuthFetchResponse, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := grpc.Invoke(ctx, "/broker.Broker/CreateTopic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) AuthorizeFetch(ctx context.Context, in *AuthFetchRequest, opts ...grpc.CallOption) (*AuthFetchResponse, error) {
	out := new(AuthFetchResponse)
	err := grpc.Invoke(ctx, "/broker.Broker/AuthorizeFetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Broker service

type BrokerServer interface {
	// CreateTopic sends a create topic request down to the log store
	// and echoes the result back to the client
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	// AuthorizeFetch asks the broker for authorization to fetch messages from
	// a topic. The auth request contains a group name that multiple clients
	// that belong to the same group can use. The broker handles load balancing
	// the topic shards between the groups memebers and makes sure no two clients
	// can read the same messages
	AuthorizeFetch(context.Context, *AuthFetchRequest) (*AuthFetchResponse, error)
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_CreateTopic_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(CreateTopicRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerServer).CreateTopic(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Broker_AuthorizeFetch_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(AuthFetchRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerServer).AuthorizeFetch(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopic",
			Handler:    _Broker_CreateTopic_Handler,
		},
		{
			MethodName: "AuthorizeFetch",
			Handler:    _Broker_AuthorizeFetch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
